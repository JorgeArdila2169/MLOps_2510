version: '3.8'

services:
  # Ancla com√∫n para Airflow
  x-airflow-common: &airflow-common
    build:
      context: ./airflow
    image: custom_airflow:latest
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@postgres:5432/${AIRFLOW_POSTGRES_DB}"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@postgres:5432/${AIRFLOW_POSTGRES_DB}"
      AIRFLOW__CELERY__BROKER_URL: "redis://redis:6379/0"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    depends_on:
      &airflow-common-depends-on
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_airflow_data_new:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s
    restart: always
    networks:
      - general-net

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - general-net

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: >
      -c "airflow db upgrade &&
          airflow users create --username airflow --password airflow --firstname Admin --lastname User --role Admin --email admin@example.com"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - general-net

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/ingestion_data:/airflow/ingestion_data
    environment:
      <<: *airflow-common-env
      EXTERNAL_API_URL: ${EXTERNAL_API_URL}
    depends_on:
      - airflow-init
      - postgres
      - redis
    restart: always
    networks:
      - general-net

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/ingestion_data:/airflow/ingestion_data
    depends_on:
      - airflow-init
      - postgres
      - redis
    restart: always
    networks:
      - general-net

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/ingestion_data:/airflow/ingestion_data
    depends_on:
      - airflow-init
      - postgres
      - redis
    restart: always
    networks:
      - general-net

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/ingestion_data:/airflow/ingestion_data
    depends_on:
      - airflow-init
      - postgres
      - redis
    restart: always
    networks:
      - general-net

volumes:
  postgres_airflow_data_new:

networks:
  general-net:
    driver: bridge
    external: true
    name: general-net
